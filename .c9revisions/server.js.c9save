{"ts":1358960011505,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/bin/env node\n//  OpenShift sample Node application\nvar express = require('express');\nvar fs      = require('fs');\n\n\n/**\n *  Define the sample application.\n */\nvar SampleApp = function() {\n\n    //  Scope.\n    var self = this;\n\n\n    /*  ================================================================  */\n    /*  Helper functions.                                                 */\n    /*  ================================================================  */\n\n    /**\n     *  Set up server IP address and port # using env variables/defaults.\n     */\n    self.setupVariables = function() {\n        //  Set the environment variables we need.\n        self.ipaddress = process.env.OPENSHIFT_INTERNAL_IP;\n        self.port      = process.env.OPENSHIFT_INTERNAL_PORT || 8080;\n\n        if (typeof self.ipaddress === \"undefined\") {\n            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this\n            //  allows us to run/test the app locally.\n            console.warn('No OPENSHIFT_INTERNAL_IP var, using 127.0.0.1');\n            self.ipaddress = \"127.0.0.1\";\n        };\n    };\n\n\n    /**\n     *  Populate the cache.\n     */\n    self.populateCache = function() {\n        if (typeof self.zcache === \"undefined\") {\n            self.zcache = { 'index.html': '' };\n        }\n\n        //  Local cache for static content.\n        self.zcache['index.html'] = fs.readFileSync('./index.html');\n    };\n\n\n    /**\n     *  Retrieve entry (content) from cache.\n     *  @param {string} key  Key identifying content to retrieve from cache.\n     */\n    self.cache_get = function(key) { return self.zcache[key]; };\n\n\n    /**\n     *  terminator === the termination handler\n     *  Terminate server on receipt of the specified signal.\n     *  @param {string} sig  Signal to terminate on.\n     */\n    self.terminator = function(sig){\n        if (typeof sig === \"string\") {\n           console.log('%s: Received %s - terminating sample app ...',\n                       Date(Date.now()), sig);\n           process.exit(1);\n        }\n        console.log('%s: Node server stopped.', Date(Date.now()) );\n    };\n\n\n    /**\n     *  Setup termination handlers (for exit and a list of signals).\n     */\n    self.setupTerminationHandlers = function(){\n        //  Process on exit and signals.\n        process.on('exit', function() { self.terminator(); });\n\n        // Removed 'SIGPIPE' from the list - bugz 852598.\n        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',\n         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'\n        ].forEach(function(element, index, array) {\n            process.on(element, function() { self.terminator(element); });\n        });\n    };\n\n\n    /*  ================================================================  */\n    /*  App server functions (main app logic here).                       */\n    /*  ================================================================  */\n\n    /**\n     *  Create the routing table entries + handlers for the application.\n     */\n    self.createRoutes = function() {\n        self.routes = { };\n\n        // Routes for /health, /asciimo and /\n        self.routes['/health'] = function(req, res) {\n            res.send('1');\n        };\n\n        self.routes['/asciimo'] = function(req, res) {\n            var link = \"http://i.imgur.com/kmbjB.png\";\n            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");\n        };\n\n        self.routes['/'] = function(req, res) {\n            res.setHeader('Content-Type', 'text/html');\n            res.send(self.cache_get('index.html') );\n        };\n    };\n\n\n    /**\n     *  Initialize the server (express) and create the routes and register\n     *  the handlers.\n     */\n    self.initializeServer = function() {\n        self.createRoutes();\n        self.app = express.createServer();\n\n        //  Add handlers for the app (from the routes).\n        for (var r in self.routes) {\n            self.app.get(r, self.routes[r]);\n        }\n    };\n\n\n    /**\n     *  Initializes the sample application.\n     */\n    self.initialize = function() {\n        self.setupVariables();\n        self.populateCache();\n        self.setupTerminationHandlers();\n\n        // Create the express server and routes.\n        self.initializeServer();\n    };\n\n\n    /**\n     *  Start the server (starts up the sample application).\n     */\n    self.start = function() {\n        //  Start the app on the specific interface (and port).\n        self.app.listen(self.port, self.ipaddress, function() {\n            console.log('%s: Node server started on %s:%d ...',\n                        Date(Date.now() ), self.ipaddress, self.port);\n        });\n    };\n\n};   /*  Sample Application.  */\n\n\n\n/**\n *  main():  Main code.\n */\nvar zapp = new SampleApp();\nzapp.initialize();\nzapp.start();\n\n"]],"start1":0,"start2":0,"length1":0,"length2":4776}]],"length":4776}
{"contributors":[],"silentsave":false,"ts":1359302258305,"patch":[[{"diffs":[[0,"nv node\n"],[1,"\n// Hello, this is to test git branch :)\n\n"],[0,"//  Open"]],"start1":8,"start2":8,"length1":16,"length2":58},{"diffs":[[0,") );\n        };\n"],[1,"        \n        self.routes['/shell'] = function(req, res){\n            var sys = require('sys')\n            var exec = require('child_process').exec;\n            function puts(error, stdout, stderr) { sys.puts(stdout) }\n            exec(\"ls -la\", puts);\n        }\n"],[0,"    };\n\n\n    /**"]],"start1":3600,"start2":3600,"length1":32,"length2":298}]],"length":5084,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359302946949,"patch":[[{"diffs":[[0,"s['/"],[-1,"shell"],[1,"update"],[0,"'] ="]],"start1":3643,"start2":3643,"length1":13,"length2":14},{"diffs":[[0,"e('sys')"],[1,";"],[0,"\n       "]],"start1":3706,"start2":3706,"length1":16,"length2":17},{"diffs":[[0,"puts);\n        }"],[1,";"],[0,"\n    };\n\n\n    /*"]],"start1":3867,"start2":3867,"length1":32,"length2":33}]],"length":5087,"saved":false}
{"ts":1359304616437,"patch":[[{"diffs":[[0,"ec(\""],[-1,"ls -la\", puts"],[1,"git status -s\""],[0,");\n "]],"start1":3854,"start2":3854,"length1":21,"length2":22}]],"length":5088,"saved":false}
{"ts":1359304754351,"patch":[[{"diffs":[[0,"atus -s\""],[1,", puts"],[0,");\n     "]],"start1":3864,"start2":3864,"length1":16,"length2":22}]],"length":5094,"saved":false}
{"ts":1359304786698,"patch":[[{"diffs":[[0," puts);\n"],[1,"            res.send('OK');\n"],[0,"        "]],"start1":3873,"start2":3873,"length1":16,"length2":44}]],"length":5122,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359543855386,"patch":[[{"diffs":[[0,"erver();"],[1,"\n        self.app = express();"],[0,"\n\n      "]],"start1":4146,"start2":4146,"length1":16,"length2":46}]],"length":5152,"saved":false}
{"ts":1359543858249,"patch":[[{"diffs":[[0,"utes();\n        "],[1,"//"],[0,"self.app = expre"]],"start1":4104,"start2":4104,"length1":32,"length2":34}]],"length":5154,"saved":false}
{"ts":1359543863580,"patch":[[{"diffs":[[0,"teRoutes();\n"],[1,"        //\n"],[0,"        //se"]],"start1":4100,"start2":4100,"length1":24,"length2":35}]],"length":5165,"saved":false}
{"ts":1359543877725,"patch":[[{"diffs":[[0,"      //"],[1,"method createServer is deprecated"],[0,"\n       "]],"start1":4114,"start2":4114,"length1":16,"length2":49}]],"length":5198,"saved":false}
