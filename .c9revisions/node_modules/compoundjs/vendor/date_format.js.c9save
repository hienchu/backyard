{"ts":1359651581531,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\nvar dateFormat = function() {\n\tvar\ttoken = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n\t\ttimezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n\t\ttimezoneClip = /[^-+\\dA-Z]/g,\n\t\tpad = function(val, len) {\n\t\t\tval = String(val);\n\t\t\tlen = len || 2;\n\t\t\twhile (val.length < len) val = '0' + val;\n\t\t\treturn val;\n\t\t};\n\n\t// Regexes and supporting functions are cached through closure\n\treturn function(date, mask, utc) {\n\t\tvar dF = dateFormat;\n\n\t\t// You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n\t\tif (arguments.length == 1 && Object.prototype.toString.call(date) == '[object String]' && !/\\d/.test(date)) {\n\t\t\tmask = date;\n\t\t\tdate = undefined;\n\t\t}\n\n\t\t// Passing date through Date applies Date.parse, if necessary\n\t\tdate = date ? new Date(date) : new Date;\n\t\tif (isNaN(date)) throw SyntaxError('invalid date');\n\n\t\tmask = String(dF.masks[mask] || mask || dF.masks['default']);\n\n\t\t// Allow setting the utc argument via the mask\n\t\tif (mask.slice(0, 4) == 'UTC:') {\n\t\t\tmask = mask.slice(4);\n\t\t\tutc = true;\n\t\t}\n\n\t\tvar\t_ = utc ? 'getUTC' : 'get',\n\t\t\td = date[_ + 'Date'](),\n\t\t\tD = date[_ + 'Day'](),\n\t\t\tm = date[_ + 'Month'](),\n\t\t\ty = date[_ + 'FullYear'](),\n\t\t\tH = date[_ + 'Hours'](),\n\t\t\tM = date[_ + 'Minutes'](),\n\t\t\ts = date[_ + 'Seconds'](),\n\t\t\tL = date[_ + 'Milliseconds'](),\n\t\t\to = utc ? 0 : date.getTimezoneOffset(),\n\t\t\tflags = {\n\t\t\t\td: d,\n\t\t\t\tdd: pad(d),\n\t\t\t\tddd: dF.i18n.dayNames[D],\n\t\t\t\tdddd: dF.i18n.dayNames[D + 7],\n\t\t\t\tm: m + 1,\n\t\t\t\tmm: pad(m + 1),\n\t\t\t\tmmm: dF.i18n.monthNames[m],\n\t\t\t\tmmmm: dF.i18n.monthNames[m + 12],\n\t\t\t\tyy: String(y).slice(2),\n\t\t\t\tyyyy: y,\n\t\t\t\th: H % 12 || 12,\n\t\t\t\thh: pad(H % 12 || 12),\n\t\t\t\tH: H,\n\t\t\t\tHH: pad(H),\n\t\t\t\tM: M,\n\t\t\t\tMM: pad(M),\n\t\t\t\ts: s,\n\t\t\t\tss: pad(s),\n\t\t\t\tl: pad(L, 3),\n\t\t\t\tL: pad(L > 99 ? Math.round(L / 10) : L),\n\t\t\t\tt: H < 12 ? 'a' : 'p',\n\t\t\t\ttt: H < 12 ? 'am' : 'pm',\n\t\t\t\tT: H < 12 ? 'A' : 'P',\n\t\t\t\tTT: H < 12 ? 'AM' : 'PM',\n\t\t\t\tZ: utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n\t\t\t\to: (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n\t\t\t\tS: ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n\t\t\t};\n\n\t\treturn mask.replace(token, function($0) {\n\t\t\treturn $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n\t\t});\n\t};\n}();\n\n// Some common format strings\ndateFormat.masks = {\n\t'default': 'ddd mmm dd yyyy HH:MM:ss',\n\tshortDate: 'm/d/yy',\n\tmediumDate: 'mmm d, yyyy',\n\tlongDate: 'mmmm d, yyyy',\n\tfullDate: 'dddd, mmmm d, yyyy',\n\tshortTime: 'h:MM TT',\n\tmediumTime: 'h:MM:ss TT',\n\tlongTime: 'h:MM:ss TT Z',\n\tisoDate: 'yyyy-mm-dd',\n\tisoTime: 'HH:MM:ss',\n\tisoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\n\tisoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\n};\n\n// Internationalization strings\ndateFormat.i18n = {\n\tdayNames: [\n\t\t'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n\t\t'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n\t],\n\tmonthNames: [\n\t\t'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n\t\t'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n\t]\n};\n\n// For convenience...\nDate.prototype.format = function(mask, utc) {\n\treturn dateFormat(this, mask, utc);\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":3760}]],"length":3760}
