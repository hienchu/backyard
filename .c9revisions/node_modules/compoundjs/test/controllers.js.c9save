{"ts":1359651656532,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var path = require('path');\nvar fs = require('fs');\n\nrequire('./spec_helper').init(exports);\napp.disable('quiet');\napp.enable('log actions');\n\nrailway.controllerBridge.root = __dirname + '/.controllers';\nrailway.structure = function () {\n    return {\n        controllers: (function () {\n            var r = {};\n            var dir = __dirname + '/.controllers';\n            fs.readdirSync(dir).forEach(function (f) {\n                r[f.replace('.js', '')] = fs.readFileSync(dir + '/' + f).toString();\n            });\n            return r;\n        })(),\n        helpers: {}\n    };\n}\n\nvar listener;\nrailway.controller.extensions.event = function () {\n    if (listener) {\n        listener.apply(this, [].slice.call(arguments));\n    }\n    this.next();\n};\n\nit('wait a little pause', function (test) {\n    setTimeout(test.done, 100);\n\n});\n\nit('should allow to load functions declared in another ctl', function (test) {\n    var ctl = getController('inclusion_test');\n    listener = function (exported) {\n        test.ok(typeof exported.user === 'function');\n        test.ok(typeof exported.admin === 'function');\n        test.ok(exported.user.name === 'requireUser');\n        test.ok(exported.admin.name == '');\n        listener = function () {};\n        test.done();\n    };\n    ctl.perform('test', req(), {});\n});\n\n// todo: move to kontroller\n// it('should protect POST requests from forgery', function (test) {\n//     var ctl = getController('csrf_test');\n//     var r = req('POST');\n//     r.session = { };\n//     // call without csrf token in session and body\n//     listener = function () {\n//         test.ok(ctl.protectedFromForgery());\n//         test.ok(r.session.csrfToken);\n//         test.ok(r.csrfToken);\n//         r.req = '?';\n//         r.body = { authenticity_token: r.csrfToken, password: '123' };\n//         listener = function () {\n//             r.body = {};\n//             ctl.next();\n//             process.nextTick(function () {\n//                 ctl.perform('test', r, {send: function (code, message) {\n//                     test.equal(code, 403);\n//                     r.originalMethod = 'GET';\n//                     ctl.next();\n//                     process.nextTick(function () {\n//                         listener = function () {\n//                             ctl.next();\n//                         };\n//                         ctl.perform('test', r, {}, test.done);\n//                     });\n//                 }});\n//             });\n//         };\n//         ctl.next();\n//     };\n//     ctl.perform('test', r, {}, function () {});\n// });\n\nfunction req(method) {\n    return fakeRequest(method || 'GET', '/');\n}\n\nfunction getController(name) {\n    return railway.controllerBridge.loadController(name);\n}\n\nfunction fakeRequest(method, path) {\n    return {\n        method: method,\n        originalMethod: method === 'GET' ? 'GET' : 'POST',\n        url: path,\n        query: {},\n        param: function (name) {\n            return this.body[name];\n        }\n    };\n}\n\nfunction asyncLoop(collection, iteration, complete) {\n    var self = this;\n    var item = collection.shift();\n    if (item) {\n        iteration.call(self, item, function next() {\n            asyncLoop.call(self, collection, iteration, complete);\n        });\n    } else if (typeof complete === 'function') {\n        complete.call(self);\n    }\n}\n\n"]],"start1":0,"start2":0,"length1":0,"length2":3343}]],"length":3343}
